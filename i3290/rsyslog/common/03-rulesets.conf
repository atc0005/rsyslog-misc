# Rulesets usable by all nodes, but predominantly by clients sending to
# receiver receiver nodes.


ruleset(name="ForwardToCentralReceiver") {

    action(type="omrelp"

        name="ForwardToCentralReceiver"
        template="structured_forwarding"

        queue.type="LinkedList"
        queue.saveOnShutdown="on"
        queue.size="10000"
        queue.filename="q_ForwardToCentralReceiver"
        queue.highwatermark="9000"
        queue.lowwatermark="50"
        queue.maxdiskspace="1g"

        action.resumeRetryCount="-1"
        action.reportSuspension="on"
        action.reportSuspensionContinuation="on"
        action.resumeInterval="10"


        target="receiver1.example.com"
        port="2514"
    )
}

ruleset(name="ForwardToReceiver2") {
    action(type="omrelp"

        name="ForwardToReceiver2"
        template="structured_forwarding"

        queue.type="LinkedList"
        queue.saveOnShutdown="on"
        queue.size="10000"
        queue.filename="q_ForwardToReceiver2"
        queue.highwatermark="9000"
        queue.lowwatermark="50"
        queue.maxdiskspace="1g"

        action.resumeRetryCount="-1"
        action.reportSuspension="on"
        action.reportSuspensionContinuation="on"
        action.resumeInterval="10"

        target="receiver2.example.com"
        port="2514"
    )
}

ruleset(name="ForwardToReceiver3") {
    action(type="omrelp"

        name="ForwardToReceiver3"
        #template="RSYSLOG_SyslogProtocol23Format"
        template="structured_forwarding"

        queue.type="LinkedList"
        queue.saveOnShutdown="on"
        queue.size="10000"
        queue.filename="q_ForwardToReceiver3"
        queue.highwatermark="9000"
        queue.lowwatermark="50"
        queue.maxdiskspace="1g"

        action.resumeRetryCount="-1"
        action.reportSuspension="on"
        action.reportSuspensionContinuation="on"
        action.resumeInterval="10"

        target="receiver3.example.com"
        port="2514"
    )
}

ruleset(name="ForwardToReceiver3-debug-JSONFormat") {

    action(type="omrelp"

        name="ForwardToReceiver3-debug-JSONFormat"

        #template="CEETemplate"
        template="structured_forwarding"

        queue.type="LinkedList"
        queue.saveOnShutdown="on"
        queue.size="10000"
        queue.filename="q_ForwardToReceiver3-debug-JSONFormat"
        queue.highwatermark="9000"
        queue.lowwatermark="50"
        queue.maxdiskspace="1g"

        action.resumeRetryCount="-1"
        action.reportSuspension="on"
        action.reportSuspensionContinuation="on"
        action.resumeInterval="10"

        target="receiver3.example.com"
        port="2518"
    )

}


# This node does not (yet?) accept RELP input, but does accept standard UDP/TCP
# syslog input
ruleset(name="ForwardToGraylog1") {
    action(type="omfwd"

        name="ForwardToGraylog1"
        template="graylogrfc5424"
        TCP_FrameDelimiter="0"
        TCP_Framing="traditional"

        queue.type="LinkedList"
        queue.saveOnShutdown="on"
        queue.size="10000"
        queue.filename="q_ForwardToGraylog1"
        queue.highwatermark="9000"
        queue.lowwatermark="50"
        queue.maxdiskspace="1g"

        action.resumeRetryCount="-1"
        action.reportSuspension="on"
        action.reportSuspensionContinuation="on"
        action.resumeInterval="10"

        target="graylog1.example.com"
        Port="514"
        Protocol="tcp"
    )
}

ruleset(name="ForwardToGraylog-gelf") {

    action(type="omfwd"
        name="ForwardToGraylog1-gelf"
        template="gelf"

        TCP_FrameDelimiter="0"

        # Note: Graylog does not appear to support "octet-counted"
        TCP_Framing="traditional"

        queue.type="LinkedList"
        queue.saveOnShutdown="on"
        queue.size="10000"
        queue.filename="q_ForwardToGraylog1_gelf"
        queue.highwatermark="9000"
        queue.lowwatermark="50"
        queue.maxdiskspace="1g"

        action.resumeRetryCount="-1"
        action.reportSuspension="on"
        action.reportSuspensionContinuation="on"
        action.resumeInterval="10"

        target="graylog1.example.com"

        # GELF TCP input
        Port="12201"
        Protocol="tcp"
    )
}

# Record details from client for use with various templates, actions, etc
ruleset(name="client-record-local-properties") {

    # Prune any leading spaces in $msg
    action(type="mmrm1stspace")

    # FIXME: Still need a check to confirm we're looking at a locally
    # generated message? Presumably yes ... ?
    # FIXME: Checking $inputname due to https://github.com/rsyslog/rsyslog/issues/545
    if ($fromhost-ip == "127.0.0.1") or ($inputname == "imfile") then {

        # Capture client-side values before forwarding as we will expand them
        # later when referencing from templates (some client-side, some receiver).

        # Needed here for client-side templates. Receiver rulesets first use
        # a dedicated ruleset to perform a lookup against a JSON table to
        # retrieve a hostname value via source IP used as a search key.
        set $.hostname = $$myhostname;
        set $.ipaddr = "127.0.0.1";

        set $!client!tag = $syslogtag;

        # Record the input where the log message originated
        set $!client!inputname = $inputname;

        # Capture original message (minus leading spaces) since the JSON payload
        # will occupy the entire message
        set $!client!msg = $msg;

    }

}
