###################################################################################################
# Purpose:
#
# Rsyslog include file containing templates used for various client or server
# actions.
#
###################################################################################################

# The template() statement is used to define templates. Note that it is a
# static statement, that means all templates are defined when rsyslog reads
# the config file. As such, templates are not affected by if-statements or
# config nesting. Templates should also be defined before referencing them.

# https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/System_Administrators_Guide/s1-structured_logging_with_rsyslog.html
template(name="CEETemplate" type="string" string="%TIMESTAMP% %HOSTNAME% %syslogtag% @cee: %$!all-json%\n")

# David Lang's provided template
#
# http://www.rsyslog.com/doc/v8-stable/configuration/properties.html
#
# timereported
#
#   timestamp from the message. Resolution depends on what was provided in the
#   message header (in most cases, only seconds)
#
# timestamp
#
#   alias for timereported
#
# 'timereported' contains the timestamp that is contained within the message
# header. Ideally, it resembles the time when the message was created at
# the original sender. Depending on how long the message was in the relay
# chain, this can be quite old.

template(name="structured_forwarding" type="list") {

    # template(name="structured_forwarding" type="string" string="<%pri%>%timereported% %hostname% %syslogtag% @cee:%$!%\n")
    constant(value="<")
    property(name="pri")
    constant(value=">")
    property(name="timereported" dateFormat="rfc3339")
    constant(value=" ")
    property(name="hostname")
    constant(value=" ")
    property(name="syslogtag")
    constant(value=" ")
    constant(value="@cee:")
    property(name="$!")
    constant(value="\n")

}

# https://github.com/Graylog2/graylog-guide-syslog-linux
# $template GRAYLOGRFC5424,"<%PRI%>%PROTOCOL-VERSION% %TIMESTAMP:::date-rfc3339% %HOSTNAME% %APP-NAME% %PROCID% %MSGID% %STRUCTURED-DATA% %msg%\n"
template(name="graylogrfc5424" type="list") {
    constant(value="<")
    property(name="pri")
    constant(value=">")
    property(name="protocol-version")
    constant(value=" ")
    property(name="timestamp" dateFormat="rfc3339")
    constant(value=" ")

    # We need to use a value provided by the primary receiver node from a
    # lookup table instead of trusting the hostname value provided by the
    # syslog message which may be forged (e.g., Qualys scans)
    property(name="$.hostname")
    constant(value=" ")
    property(name="$.application")
    constant(value=" ")
    property(name="procid")
    constant(value=" ")
    property(name="msgid")
    constant(value=" ")
    property(name="structured-data")
    constant(value=" ")
    property(name="$.msg" droplastlf="on" )
    constant(value="\n")
}

# http://www.rsyslog.com/doc/v8-stable/tutorials/gelf_forwarding.html
# http://docs.graylog.org/en/2.3/pages/gelf.html#gelf-via-tcp
# template(name="gelf" type="list" option.jsonf="on") {
template(name="gelf" type="list" option.jsonf="off") {
    # constant(outname="version" value="1" format="jsonf")
    # property(outname="host" name="$.hostname" format="jsonf")
    # property(outname="short_message" name="$.msg" format="jsonf")
    # constant(value="timestamp:")
    # property(outname="timestamp" name="timegenerated" dateformat="unixtimestamp" format="json")
    # property(outname="level" name="syslogseverity" format="jsonf")
    # #property(outname="" name="" format="jsonf")
    # property(outname="_level" name="pri" format="jsonf")
    # property(outname="_process_id" name="procid" format="jsonf")
    # property(outname="_message_id" name="msgid" format="jsonf")
    # property(outname="_origin_ip_address" name="$.ipaddr" format="jsonf")
    # property(outname="_application_name" name="$.application" format="jsonf")
    # property(outname="_input_name" name="$.inputname" format="jsonf")

    # Open JSON structure
    constant(value="{")

    # "version": "1.1"
    constant(value="\"version\"")
    constant(value=":")
    constant(value="\"1.1\"")

    # Separator
    constant(value=", ")

    # "host":"holocron"
    constant(value="\"host\"")
    constant(value=": ")
    constant(value="\"")
    property(name="$.hostname")
    constant(value="\"")

    # Separator
    constant(value=", ")

    constant(value="\"short_message\"")
    constant(value=": ")
    constant(value="\"")
    property(name="$.msg")
    constant(value="\"")

    # Separator
    constant(value=", ")

    constant(value="\"timestamp\"")
    constant(value=": ")
    property(name="timegenerated" dateformat="unixtimestamp")

    # Separator
    constant(value=", ")

    constant(value="\"level\"")
    constant(value=": ")
    constant(value="\"")
    property(name="syslogseverity")
    constant(value="\"")

    # Separator
    constant(value=", ")

    constant(value="\"_process_id\"")
    constant(value=": ")
    constant(value="\"")
    property(name="procid")
    constant(value="\"")

    # Separator
    constant(value=", ")

    constant(value="\"_origin_ip_address\"")
    constant(value=": ")
    constant(value="\"")
    property(name="$.ipaddr")
    constant(value="\"")

    # Separator
    constant(value=", ")

    constant(value="\"_application_name\"")
    constant(value=": ")
    constant(value="\"")
    property(name="$.application")
    constant(value="\"")

    # Separator
    constant(value=", ")

    constant(value="\"_input_name\"")
    constant(value=": ")
    constant(value="\"")
    property(name="$.inputname")
    constant(value="\"")

    # Close JSON structure
    constant(value="}")
}

# Going to have to craft this by hand
template(name="gelf-log-output" type="list" option.jsonf="off") {

    # Open JSON structure
    constant(value="{")

    # "version": "1.1"
    constant(value="\"version\"")
    constant(value=":")
    constant(value="\"1.1\"")

    # Separator
    constant(value=", ")

    # "host":"holocron"
    constant(value="\"host\"")
    constant(value=": ")
    constant(value="\"")
    property(name="$.hostname")
    constant(value="\"")

    # Separator
    constant(value=", ")

    constant(value="\"short_message\"")
    constant(value=": ")
    constant(value="\"")
    property(name="$.msg")
    constant(value="\"")

    # Separator
    constant(value=", ")

    constant(value="\"timestamp\"")
    constant(value=": ")
    property(name="timegenerated" dateformat="unixtimestamp")

    # Separator
    constant(value=", ")

    constant(value="\"level\"")
    constant(value=": ")
    constant(value="\"")
    property(name="syslogseverity")
    constant(value="\"")

    # Separator
    constant(value=", ")

    constant(value="\"_process_id\"")
    constant(value=": ")
    constant(value="\"")
    property(name="procid")
    constant(value="\"")

    # Separator
    constant(value=", ")

    constant(value="\"_origin_ip_address\"")
    constant(value=": ")
    constant(value="\"")
    property(name="$.ipaddr")
    constant(value="\"")

    # Separator
    constant(value=", ")

    constant(value="\"_application_name\"")
    constant(value=": ")
    constant(value="\"")
    property(name="$.application")
    constant(value="\"")

    # Separator
    constant(value=", ")

    constant(value="\"_input_name\"")
    constant(value=": ")
    constant(value="\"")
    property(name="$.inputname")
    constant(value="\"")

    # Close JSON structure
    constant(value="}")

    constant(value="\n")
}


# Intended for use by omfile actions included within ForwardToSawmillX actions
template(name="tmpl-debug-log-forward-call" type="list") {
    property(name="timereported" dateFormat="rfc3339" caseConversion="lower")
    constant(value=" ForwardToSawmill1 called for message:'")
    property(name="msg")
    constant(value="\n")
    }


###################################################
# RECEIVER TEMPLATES
###################################################

# Global fall-back in case it is not overridden for specific notifications
set $/default-email-notification!body!extra-notes = 'Note: These notifications are rate limited to prevent an overflow of tickets related to a single prolonged event.';

# Templates used for critical email alerts
template(name="email-notification-standard-body" type="list") {
    constant(value="Affected system hostname: ")
    property(name="$.hostname")
    constant(value="\n")
    constant(value="Affected system IP Address: ")

    # Use a variable that is set to the origin/source IP
    # and not the bare IP from the host that handed the message to this
    # receiver (otherwise receiver3 only sees receiver1 as message sender).
    property(name="$.ipaddr")
    constant(value="\n")
    constant(value="Message reported: ")
    property(name="timereported" dateFormat="rfc3339")
    constant(value="\n")
    constant(value="Message received: ")
    property(name="timegenerated" dateFormat="rfc3339")
    constant(value="\n")
    constant(value="Reporting system: ")
    property(name="$myhostname")
    constant(value="\n")

    # Add some whitespace to help separate the message from the "wall" of
    # details just prior.
    constant(value="\n")
    constant(value="Message: ")
    property(name="$.msg" droplastlf="on" )
    constant(value="\n")

    constant(value="\n")
    # Optional text that may not be provided in all cases.
    property(name="$.email-notification!body!extra-notes")
    constant(value="\n")

    constant(value="\n")
    # Optional text that can be used by ticketing systems or mail rules to
    # help automate routing of these notifications
    property(name="$.email-notification!body!footer")
    constant(value="\n")

}

template(name="email-notification-standard-subject" type="list") {

    constant(value="RSYSLOG Alert from ")
    property(name="$myhostname")
    constant(value=" for ")
    property(name="$.hostname")
    constant(value=": ")
    property(name="$.email-notification!subject!topic")
    #property(name="$.email-notification!subject!what")
    #constant(value=" from ")
    #property(name="$.email-notification!subject!who")
    #constant(value=" at ")
    #property(name="$.email-notification!subject!where")

}



# For every client connected to rsyslog server, system will automatically
# create the client folders and files as needed based on the templates
# defined below.

template(name="RemoteHostProgramName" type="string" string="/var/log/rsyslog_client/%$.hostname:::lowercase%/%$.application:::lowercase%.log")

template(name="RemoteHostMailLog" type="string" string="/var/log/rsyslog_client/%$.hostname:::lowercase%/mail.log")
template(name="RemoteHostMailErrorLog" type="string" string="/var/log/rsyslog_client/%$.hostname:::lowercase%/mail.err")
template(name="RemoteHostCombinedMailLog" type="string" string="/var/log/rsyslog_client/combined/mail.log")
template(name="RemoteHostCombinedMailSubjectLinesLog" type="string" string="/var/log/rsyslog_client/combined/mail-subject-lines.log")
template(name="RemoteHostCombinedMailRelayServersLog" type="string" string="/var/log/rsyslog_client/mail_relay_servers/mail.log")

template(name="RemoteHostAuthLog" type="string" string="/var/log/rsyslog_client/%$.hostname:::lowercase%/auth.log")
template(name="RemoteHostCombinedAuthLog" type="string" string="/var/log/rsyslog_client/combined/auth.log")

# e.g., cron, daemon, lpr, user, etc.
template(name="RemoteHostFacilityNameLog" type="string" string="/var/log/rsyslog_client/%$.hostname:::lowercase%/%syslogfacility-text:::lowercase%.log")


# RECEIVER: used to expand JSON structure known to rsyslog into
# a full JSON message.
template(name="tmpl-receive-JSON-all" type="list") {
    property(name="$!all-json")
    constant(value="\n")
}

# RECEIVER: used primarily by omfile actions which assume that local
# variables needed by this template have already been set.
template(name="Modified-StockRsyslogFileFormat" type="list") {
    property(name="timestamp" dateFormat="rfc3339")
    constant(value=" ")

    # Use the value from the $.hostname local variable (retrieved from the
    # ip_hostname_mappings lookup table) instead of $hostname message property
    property(name="$.hostname")
    constant(value=" ")

    # Use values captured earlier on the sender or explicitly set from
    # forwarded syslog values if the $! subtree value is not set.
    property(name="$.tag")
    property(name="$.msg" spifno1stsp="on" )
    property(name="$.msg" droplastlf="on" )
    constant(value="\n")
}

